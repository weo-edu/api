{
  "name": "migrate",
  "version": "0.1.3",
  "description": "Abstract migration framework for node",
  "keywords": [
    "migrate",
    "migrations"
  ],
  "author": {
    "name": "TJ Holowaychuk",
    "email": "tj@vision-media.ca"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/visionmedia/node-migrate"
  },
  "bin": {
    "migrate": "./bin/migrate"
  },
  "devDependencies": {
    "should": ">= 0.0.1"
  },
  "main": "index",
  "engines": {
    "node": ">= 0.4.x"
  },
  "dependencies": {
    "monk": "~0.9.0"
  },
  "readme": "\n# migrate\n\n  Abstract migration framework for node. Uses mongo (`MONGO_URL`) to store migrations instead of filesystem.\n\n## Installation\n\n    $ npm install migrate\n\n## Usage\n\n```\nUsage: migrate [options] [command]\n\nOptions:\n\n   -c, --chdir <path>   change the working directory\n\nCommands:\n\n   down             migrate down\n   up               migrate up (the default command)\n   create [title]   create a new migration file with optional [title]\n\n```\n\n## Creating Migrations\n\nTo create a migration, execute `migrate create` with an optional title. `node-migrate` will create a node module within `./migrations/` which contains the following two exports:\n\n    exports.up = function(next){\n      next();\n    };\n\n    exports.down = function(next){\n      next();\n    };\n\nAll you have to do is populate these, invoking `next()` when complete, and you are ready to migrate!\n\nFor example:\n\n    $ migrate create add-pets\n    $ migrate create add-owners\n\nThe first call creates `./migrations/000-add-pets.js`, which we can populate:\n\n      var db = require('./db');\n\n      exports.up = function(next){\n        db.rpush('pets', 'tobi');\n        db.rpush('pets', 'loki');\n        db.rpush('pets', 'jane', next);\n      };\n\n      exports.down = function(next){\n        db.rpop('pets');\n        db.rpop('pets', next);\n      };\n\nThe second creates `./migrations/001-add-owners.js`, which we can populate:\n\n      var db = require('./db');\n\n      exports.up = function(next){\n        db.rpush('owners', 'taylor');\n        db.rpush('owners', 'tj', next);\n      };\n\n      exports.down = function(next){\n        db.rpop('owners');\n        db.rpop('owners', next);\n      };\n\n## Running Migrations\n\nWhen first running the migrations, all will be executed in sequence.\n\n      $ migrate\n      up : migrations/000-add-pets.js\n      up : migrations/001-add-jane.js\n      up : migrations/002-add-owners.js\n      up : migrations/003-coolest-pet.js\n      migration : complete\n\nSubsequent attempts will simply output \"complete\", as they have already been executed in this machine. `node-migrate` knows this because it stores the current state in `./migrations/.migrate` which is typically a file that SCMs like GIT should ignore.\n\n      $ migrate\n      migration : complete\n\nIf we were to create another migration using `migrate create`, and then execute migrations again, we would execute only those not previously executed:\n\n      $ migrate\n      up : migrates/004-coolest-owner.js\n\nYou can also run migrations incrementally by specifying a migration.\n\n      $ migrate up 002-coolest-pet.js\n      up : migrations/000-add-pets.js\n      up : migrations/001-add-jane.js\n      up : migrations/002-add-owners.js\n      migration : complete\n\nThis will run up-migrations upto (and including) `002-coolest-pet.js`. Similarly you can run down-migrations upto (and including) a specific migration, instead of migrating all the way down.\n\n      $ migrate down 001-add-jane.js\n      down : migrations/002-add-owners.js\n      down : migrations/001-add-jane.js\n      migration : complete\n\n## License \n\n(The MIT License)\n\nCopyright (c) 2011 TJ Holowaychuk &lt;tj@vision-media.ca&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.",
  "readmeFilename": "Readme.md",
  "bugs": {
    "url": "https://github.com/visionmedia/node-migrate/issues"
  },
  "homepage": "https://github.com/visionmedia/node-migrate",
  "_id": "migrate@0.1.3",
  "_shasum": "7ff1bdedb700c24d2e93d3d9994ef3a2b48ae92e",
  "_resolved": "git://github.com/weo-edu/node-migrate#662768d2c6ccb0be083c58cfdbae5f96bb544bbc",
  "_from": "git://github.com/weo-edu/node-migrate",
  "_fromGithub": true
}
