{
  "author": {
    "name": "Ivan Akimov",
    "email": "ivan@barreleye.com",
    "url": "https://twitter.com/IvanAkimov"
  },
  "name": "hashids",
  "description": "A small Node.js class to generate YouTube-like hashids from one or many numbers. Use hashids when you do not want to expose your database ids to the user. ",
  "version": "1.0.0",
  "preferGlobal": true,
  "homepage": "http://hashids.org/node-js",
  "repository": {
    "type": "git",
    "url": "https://github.com/ivanakimov/hashids.node.js"
  },
  "main": "lib/hashids.js",
  "dependencies": {},
  "devDependencies": {},
  "optionalDependencies": {},
  "license": "MIT",
  "keywords": [
    "hashids",
    "hashid",
    "hash",
    "ids",
    "youtube",
    "obfuscate",
    "encrypt",
    "decrypt",
    "encode",
    "decode"
  ],
  "engines": {
    "node": "*"
  },
  "readme": "![hashids](http://www.hashids.org.s3.amazonaws.com/public/img/hashids.png \"Hashids\")\n\n======\n\nFull Documentation\n-------\n\nA small Node.js class to generate YouTube-like hashids from one or many numbers. Use hashids when you do not want to expose your database ids to the user. Read full documentation at: [http://hashids.org/node-js](http://hashids.org/node-js)\n\n![hashids](https://api.travis-ci.org/ivanakimov/hashids.node.js.svg \"Hashids\")\n\nInstallation\n-------\n\n1. Node it up: [http://nodejs.org/download/](http://nodejs.org/download/)\n2. Install using npm:\n\t\n\t`npm install -g hashids`\n\t\nUpdating from v0.3 to 1.0?\n-------\n\nRead the `CHANGELOG` at the bottom of this readme!\n\nClient-side Version\n-------\n\nIf you're looking for a client-side Bower version, there's a separate repo: <https://github.com/ivanakimov/hashids.js/>\n\nProduction Note\n-------\n\n**BE CAREFUL WHICH VERSION OF HASHIDS YOU ARE USING.**\n\nSince future improvements to Hashids might alter produced hashes, it's a good idea to specify *exact* Hashids version in your **package.json**, if their consistency is important to you (if you are storing them in database):\n\n```javascript\n\t\n\t\"dependencies\": {\n\t\t\"hashids\": \"1.0.0\"\n\t}\n```\n\nUsage\n-------\n\n#### Encoding one number\n\nYou can pass a unique salt value so your ids differ from everyone else's. I use \"this is my salt\" as an example.\n\n```javascript\n\nvar Hashids = require(\"hashids\"),\n\thashids = new Hashids(\"this is my salt\");\n\nvar id = hashids.encode(12345);\n```\n\n`id` is now going to be:\n\t\n\tNkK9\n\n#### Decoding\n\nNotice during decoding, same salt value is used:\n\n```javascript\n\nvar Hashids = require(\"hashids\"),\n\thashids = new Hashids(\"this is my salt\");\n\nvar numbers = hashids.decode(\"NkK9\");\n```\n\n`numbers` is now going to be:\n\t\n\t[ 12345 ]\n\n#### Decoding with different salt\n\nDecoding will not work if salt is changed:\n\n```javascript\n\nvar Hashids = require(\"hashids\"),\n\thashids = new Hashids(\"this is my pepper\");\n\nvar numbers = hashids.decode(\"NkK9\");\n```\n\n`numbers` is now going to be:\n\t\n\t[]\n\t\n#### Encoding several numbers\n\n```javascript\n\nvar Hashids = require(\"hashids\"),\n\thashids = new Hashids(\"this is my salt\");\n\nvar id = hashids.encode(683, 94108, 123, 5);\n```\n\n`id` is now going to be:\n\t\n\taBMswoO2UB3Sj\n\t\nYou can also pass an array:\n\n```javascript\n\nvar arr = [683, 94108, 123, 5];\nvar id = hashids.encode(arr);\n```\n\n#### Decoding is done the same way\n\n```javascript\n\nvar Hashids = require(\"hashids\"),\n\thashids = new Hashids(\"this is my salt\");\n\nvar numbers = hashids.decode(\"aBMswoO2UB3Sj\");\n```\n\n`numbers` is now going to be:\n\t\n\t[ 683, 94108, 123, 5 ]\n\t\n#### Encoding and specifying minimum id length\n\nHere we encode integer 1, and set the **minimum** id length to **8** (by default it's **0** -- meaning ids will be the shortest possible length).\n\n```javascript\n\nvar Hashids = require(\"hashids\"),\n\thashids = new Hashids(\"this is my salt\", 8);\n\nvar id = hashids.encode(1);\n```\n\n`id` is now going to be:\n\t\n\tgB0NV05e\n\t\n#### Decoding\n\n```javascript\n\nvar Hashids = require(\"hashids\"),\n\thashids = new Hashids(\"this is my salt\", 8);\n\nvar numbers = hashids.decode(\"gB0NV05e\");\n```\n\n`numbers` is now going to be:\n\t\n\t[ 1 ]\n\t\n#### Specifying custom id alphabet\n\nHere we set the alphabet to consist of valid hex characters: \"0123456789abcdef\"\n\n```javascript\n\nvar Hashids = require(\"hashids\"),\n\thashids = new Hashids(\"this is my salt\", 0, \"0123456789abcdef\");\n\nvar id = hashids.encode(1234567);\n```\n\n`id` is now going to be:\n\t\n\tb332db5\n\t\nMongoDB Support\n-------\n\nMongoDB uses hex strings for their ObjectIds. You can convert them to Hashids like this:\n\n```javascript\n\nvar Hashids = require(\"hashids\"),\n\thashids = new Hashids(\"this is my salt\");\n\nvar id = hashids.encodeHex(\"507f191e810c19729de860ea\");\nvar objectId = hashids.decodeHex(id);\n```\n\n`id` will be:\n\t\n\tyNyaoWeKWVINWqvaM9bw\n\t\n`objectId` will be as expected:\n\t\n\t507f191e810c19729de860ea\n\t\nThe length of the hex string does not matter -- it does not have to be a MongoDB ObjectId.\n\t\nRandomness\n-------\n\nThe primary purpose of hashids is to obfuscate ids. It's not meant or tested to be used for security purposes or compression.\nHaving said that, this algorithm does try to make these hashes unguessable and unpredictable:\n\n#### Repeating numbers\n\n```javascript\n\nvar Hashids = require(\"hashids\"),\n\thashids = new Hashids(\"this is my salt\");\n\nvar id = hashids.encode(5, 5, 5, 5);\n```\n\nYou don't see any repeating patterns that might show there's 4 identical numbers in the id:\n\n\t1Wc8cwcE\n\nSame with incremented numbers:\n\n```javascript\n\nvar Hashids = require(\"hashids\"),\n\thashids = new Hashids(\"this is my salt\");\n\nvar id = hashids.encode(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n```\n\n`id` will be :\n\t\n\tkRHnurhptKcjIDTWC3sx\n\t\n#### Incrementing number ids:\n\n```javascript\n\nvar Hashids = require(\"hashids\"),\n\thashids = new Hashids(\"this is my salt\");\n\nvar id1 = hashids.encode(1), /* NV */\n\tid2 = hashids.encode(2), /* 6m */\n\tid3 = hashids.encode(3), /* yD */\n\tid4 = hashids.encode(4), /* 2l */\n\tid5 = hashids.encode(5); /* rD */\n```\n\nCurses! #$%@\n-------\n\nThis code was written with the intent of placing created hashes in visible places - like the URL. Which makes it unfortunate if generated hashes accidentally formed a bad word.\n\nTherefore, the algorithm tries to avoid generating most common English curse words. This is done by never placing the following letters next to each other:\n\t\n\tc, C, s, S, f, F, h, H, u, U, i, I, t, T\n\nRunning tests\n-------\nHashids uses [jasmine](http://pivotal.github.io/jasmine/) spec tests, particularly [jasmine-node](https://npmjs.org/package/jasmine-node).\n\nTo install `sudo npm install -g jasmine-node`\nthen just run `jasmine-node .` in the root folder.\n\nChangelog\n-------\n\n**1.0.0**\n\n- Several public functions are renamed to be more appropriate:\n\t- Function `encrypt()` changed to `encode()`\n\t- Function `decrypt()` changed to `decode()`\n\t- Function `encryptHex()` changed to `encodeHex()`\n\t- Function `decryptHex()` changed to `decodeHex()`\n\t\n\tHashids was designed to encode integers, primary ids at most. We've had several requests to encrypt sensitive data with Hashids and this is the wrong algorithm for that. So to encourage more appropriate use, `encrypt/decrypt` is being \"downgraded\" to `encode/decode`.\n\n- Version tag added: `1.0`\n- `README.md` updated\n\n**0.3.3 - Current Stable**\n\n- `.toString()` added in `encryptHex()`: [https://github.com/ivanakimov/hashids.node.js/pull/9](https://github.com/ivanakimov/hashids.node.js/pull/9) (thanks to [@namuol](https://github.com/namuol))\n\n**0.3.2**\n\n- minor: contact email changed\n- minor: internal version is accurate now\n\n**0.3.1**\n\n- minor: closure + readme update merged (thanks to [@krunkosaurus](https://github.com/krunkosaurus))\n- minor: a few cleanups\n\n**0.3.0**\n\n**PRODUCED HASHES IN THIS VERSION ARE DIFFERENT THAN IN 0.1.4, DO NOT UPDATE IF YOU NEED THEM TO KEEP WORKING:**\n\n- Same algorithm as [PHP version](https://github.com/ivanakimov/hashids.php) now\n- Overall approximately **4x** faster\n- Consistent shuffle function uses slightly modified version of [Fisherâ€“Yates algorithm](http://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle#The_modern_algorithm)\n- Generate large hash strings faster (where _minHashLength_ is more than 1000 chars)\n- When using _minHashLength_, hash character disorder has been improved\n- Basic English curse words will now be avoided even with custom alphabet\n- New unit tests with [Jasmine](https://github.com/mhevery/jasmine-node)\n- Support for MongoDB ObjectId\n- _encrypt_ function now also accepts array of integers as input\n- Passing JSLint now\n\n**0.1.4**\n\n- Global var leak for hashSplit (thanks to [@BryanDonovan](https://github.com/BryanDonovan))\n- Class capitalization (thanks to [@BryanDonovan](https://github.com/BryanDonovan))\n\n**0.1.3**\n\n\tWarning: If you are using 0.1.2 or below, updating to this version will change your hashes.\n\n- Updated default alphabet (thanks to [@speps](https://github.com/speps))\n- Constructor removes duplicate characters for default alphabet as well (thanks to [@speps](https://github.com/speps))\n\n**0.1.2**\n\n\tWarning: If you are using 0.1.1 or below, updating to this version will change your hashes.\n\n- Minimum hash length can now be specified\n- Added more randomness to hashes\n- Added unit tests\n- Added example files\n- Changed warnings that can be thrown\n- Renamed `encode/decode` to `encrypt/decrypt`\n- Consistent shuffle does not depend on md5 anymore\n- Speed improvements\n\n**0.1.1**\n\n- Speed improvements\n- Bug fixes\n\n**0.1.0**\n\t\n- First commit\n\nContact\n-------\n\nFollow me [@IvanAkimov](http://twitter.com/ivanakimov)\n\nOr [http://ivanakimov.com](http://ivanakimov.com)\n\nLicense\n-------\n\nMIT License. See the `LICENSE` file. You can use Hashids in open source projects and commercial products. Don't break the Internet. Kthxbye.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/ivanakimov/hashids.node.js/issues"
  },
  "_id": "hashids@1.0.0",
  "_shasum": "5b69aa4a3d592d1158d443289b7ac57bbd6f7a00",
  "_from": "hashids@latest",
  "_resolved": "http://registry.npmjs.org/hashids/-/hashids-1.0.0.tgz"
}
